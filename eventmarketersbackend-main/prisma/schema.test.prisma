// Test Database Schema (SQLite Compatible)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Admin Users
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("ADMIN")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images    Image[]
  videos    Video[]
  categories BusinessCategory[]
  createdSubadmins Subadmin[]
  auditLogs AuditLog[]

  @@map("admins")
}

// Subadmin Users
model Subadmin {
  id                    String   @id @default(cuid())
  email                 String   @unique
  name                  String
  password              String
  mobileNumber          String?
  role                  String
  permissions           String   // JSON string of permissions array
  status                String   @default("ACTIVE")
  assignedCategories    String   // JSON string of assigned categories
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastLogin             DateTime?
  createdBy             String

  admin     Admin @relation(fields: [createdBy], references: [id])
  images    Image[]
  videos    Video[]
  auditLogs AuditLog[]

  @@map("subadmins")
}

// Business Categories
model BusinessCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  admin     Admin @relation(fields: [createdBy], references: [id])
  images    Image[]
  videos    Video[]
  customers Customer[]

  @@map("business_categories")
}

// Images
model Image {
  id              String   @id @default(cuid())
  title           String
  description     String?
  url             String
  thumbnailUrl    String?
  category        String   // "BUSINESS", "FESTIVAL", "GENERAL"
  businessCategoryId String?
  tags            String?  // JSON string of tags array
  fileSize        Int
  dimensions      String?
  format          String
  adminUploaderId String?
  subadminUploaderId String?
  uploaderType    String   // "ADMIN" or "SUBADMIN"
  approvalStatus  String   @default("PENDING")
  approvedBy      String?
  approvedAt      DateTime?
  downloads       Int      @default(0)
  views           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  businessCategory BusinessCategory? @relation(fields: [businessCategoryId], references: [id])
  adminUploader    Admin?            @relation(fields: [adminUploaderId], references: [id])
  subadminUploader Subadmin?         @relation(fields: [subadminUploaderId], references: [id])

  @@map("images")
}

// Videos
model Video {
  id              String   @id @default(cuid())
  title           String
  description     String?
  url             String
  thumbnailUrl    String?
  category        String   // "BUSINESS", "FESTIVAL", "GENERAL"
  businessCategoryId String?
  tags            String?  // JSON string of tags array
  duration        Int?
  fileSize        Int
  resolution      String?
  format          String
  adminUploaderId String?
  subadminUploaderId String?
  uploaderType    String   // "ADMIN" or "SUBADMIN"
  approvalStatus  String   @default("PENDING")
  approvedBy      String?
  approvedAt      DateTime?
  downloads       Int      @default(0)
  views           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  businessCategory BusinessCategory? @relation(fields: [businessCategoryId], references: [id])
  adminUploader    Admin?            @relation(fields: [adminUploaderId], references: [id])
  subadminUploader Subadmin?         @relation(fields: [subadminUploaderId], references: [id])

  @@map("videos")
}

// Installed Users (App users before subscription)
model InstalledUser {
  id                     String   @id @default(cuid())
  deviceId               String   @unique
  name                   String?
  email                  String?  @unique
  phone                  String?
  appVersion             String?
  installDate            DateTime @default(now())
  lastActiveAt           DateTime?
  totalViews             Int      @default(0)
  downloadAttempts       Int      @default(0)
  isConverted            Boolean  @default(false)
  convertedAt            DateTime?
  convertedToCustomerId  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  auditLogs              AuditLog[]

  @@map("installed_users")
}

// Customers (Subscribed users with business profiles)
model Customer {
  id                     String   @id @default(cuid())
  name                   String
  email                  String   @unique
  phone                  String?
  deviceId               String?
  selectedBusinessCategoryId String?
  subscriptionStatus     String   @default("INACTIVE")
  subscriptionStartDate  DateTime?
  subscriptionEndDate    DateTime?
  subscriptionAmount     Float?
  paymentMethod          String?
  appVersion             String?
  lastActiveAt           DateTime?
  totalDownloads         Int      @default(0)
  
  // Business Profile Information
  businessName           String?
  businessPhone          String?
  businessEmail          String?
  businessWebsite        String?
  businessAddress        String?
  businessLogo           String?
  businessDescription    String?
  businessCategory       String?
  
  // Conversion tracking
  convertedFromInstalledUserId String?
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  selectedBusinessCategory BusinessCategory? @relation(fields: [selectedBusinessCategoryId], references: [id])
  subscriptions           Subscription[]
  auditLogs               AuditLog[]

  @@map("customers")
}

// Subscriptions
model Subscription {
  id            String   @id @default(cuid())
  customerId    String
  plan          String   @default("YEARLY")
  status        String   @default("ACTIVE")
  amount        Float
  currency      String   @default("USD")
  startDate     DateTime
  endDate       DateTime
  paymentId     String?
  paymentMethod String?
  autoRenew     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Audit Logs
model AuditLog {
  id              String   @id @default(cuid())
  adminId         String?
  subadminId      String?
  customerId      String?
  installedUserId String?
  userType        String
  action          String
  resource        String
  resourceId      String?
  details         String?
  ipAddress       String?
  userAgent       String?
  status          String   @default("SUCCESS")
  createdAt       DateTime @default(now())

  admin         Admin?         @relation(fields: [adminId], references: [id])
  subadmin      Subadmin?      @relation(fields: [subadminId], references: [id])
  customer      Customer?      @relation(fields: [customerId], references: [id])
  installedUser InstalledUser? @relation(fields: [installedUserId], references: [id])

  @@map("audit_logs")
}
