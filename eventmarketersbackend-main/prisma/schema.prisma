// Business Marketing Platform Database Schema (PostgreSQL Compatible)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin Users
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("ADMIN")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images    Image[]
  videos    Video[]
  categories BusinessCategory[]
  createdSubadmins Subadmin[]
  auditLogs AuditLog[]

  @@map("admins")
}

// Subadmin Users
model Subadmin {
  id                    String   @id @default(cuid())
  email                 String   @unique
  name                  String
  password              String
  mobileNumber          String?
  role                  String
  permissions           String   // JSON string of permissions array
  status                String   @default("ACTIVE")
  assignedCategories    String   // JSON string of assigned categories
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastLogin             DateTime?
  createdBy             String

  admin     Admin @relation(fields: [createdBy], references: [id])
  images    Image[]
  videos    Video[]
  auditLogs AuditLog[]

  @@map("subadmins")
}

// Business Categories
model BusinessCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  admin     Admin @relation(fields: [createdBy], references: [id])
  images    Image[]
  videos    Video[]
  customers Customer[]

  @@map("business_categories")
}

// Images
model Image {
  id              String   @id @default(cuid())
  title           String
  description     String?
  url             String
  thumbnailUrl    String?
  category        String   // "BUSINESS", "FESTIVAL", "GENERAL"
  businessCategoryId String?
  tags            String?  // JSON string of tags array
  fileSize        Int
  dimensions      String?
  format          String
  adminUploaderId String?
  subadminUploaderId String?
  uploaderType    String   // "ADMIN" or "SUBADMIN"
  approvalStatus  String   @default("PENDING")
  approvedBy      String?
  approvedAt      DateTime?
  downloads       Int      @default(0)
  views           Int      @default(0)
  
  // Content Sync Fields
  isMobileSynced  Boolean  @default(false)
  mobileSyncAt    DateTime?
  mobileTemplateId String? @unique
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  businessCategory BusinessCategory? @relation(fields: [businessCategoryId], references: [id])
  adminUploader    Admin?            @relation(fields: [adminUploaderId], references: [id])
  subadminUploader Subadmin?         @relation(fields: [subadminUploaderId], references: [id])
  
  // Mobile Template relation
  mobileTemplate  MobileTemplate?

  @@map("images")
}

// Videos
model Video {
  id              String   @id @default(cuid())
  title           String
  description     String?
  url             String
  thumbnailUrl    String?
  category        String   // "BUSINESS", "FESTIVAL", "GENERAL"
  businessCategoryId String?
  tags            String?  // JSON string of tags array
  duration        Int?
  fileSize        Int
  resolution      String?
  format          String
  adminUploaderId String?
  subadminUploaderId String?
  uploaderType    String   // "ADMIN" or "SUBADMIN"
  approvalStatus  String   @default("PENDING")
  approvedBy      String?
  approvedAt      DateTime?
  downloads       Int      @default(0)
  views           Int      @default(0)
  
  // Content Sync Fields
  isMobileSynced  Boolean  @default(false)
  mobileSyncAt    DateTime?
  mobileVideoId   String? @unique
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  businessCategory BusinessCategory? @relation(fields: [businessCategoryId], references: [id])
  adminUploader    Admin?            @relation(fields: [adminUploaderId], references: [id])
  subadminUploader Subadmin?         @relation(fields: [subadminUploaderId], references: [id])
  
  // Mobile Video relation
  mobileVideo     MobileVideo?

  @@map("videos")
}

// Installed Users (App users before subscription)
model InstalledUser {
  id                     String   @id @default(cuid())
  deviceId               String   @unique
  name                   String?
  email                  String?  @unique
  phone                  String?
  appVersion             String?
  installDate            DateTime @default(now())
  lastActiveAt           DateTime?
  totalViews             Int      @default(0)
  downloadAttempts       Int      @default(0)
  isConverted            Boolean  @default(false)
  convertedAt            DateTime?
  convertedToCustomerId  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  auditLogs              AuditLog[]

  @@map("installed_users")
}

// Customers (Subscribed users with business profiles)
model Customer {
  id                     String   @id @default(cuid())
  name                   String
  email                  String   @unique
  phone                  String?
  deviceId               String?
  selectedBusinessCategoryId String?
  subscriptionStatus     String   @default("INACTIVE")
  subscriptionStartDate  DateTime?
  subscriptionEndDate    DateTime?
  subscriptionAmount     Float?
  paymentMethod          String?
  appVersion             String?
  lastActiveAt           DateTime?
  totalDownloads         Int      @default(0)
  
  // Business Profile Information
  businessName           String?
  businessPhone          String?
  businessEmail          String?
  businessWebsite        String?
  businessAddress        String?
  businessLogo           String?
  businessDescription    String?
  businessCategory       String?
  
  // Conversion tracking
  convertedFromInstalledUserId String?
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  selectedBusinessCategory BusinessCategory? @relation(fields: [selectedBusinessCategoryId], references: [id])
  subscriptions           Subscription[]
  auditLogs               AuditLog[]

  @@map("customers")
}

// Subscriptions
model Subscription {
  id            String   @id @default(cuid())
  customerId    String
  plan          String   @default("YEARLY")
  status        String   @default("ACTIVE")
  amount        Float
  currency      String   @default("USD")
  startDate     DateTime
  endDate       DateTime
  paymentId     String?
  paymentMethod String?
  autoRenew     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Audit Logs
model AuditLog {
  id              String   @id @default(cuid())
  adminId         String?
  subadminId      String?
  customerId      String?
  installedUserId String?
  userType        String
  action          String
  resource        String
  resourceId      String?
  details         String?
  ipAddress       String?
  userAgent       String?
  status          String   @default("SUCCESS")
  createdAt       DateTime @default(now())

  admin         Admin?         @relation(fields: [adminId], references: [id])
  subadmin      Subadmin?      @relation(fields: [subadminId], references: [id])
  customer      Customer?      @relation(fields: [customerId], references: [id])
  installedUser InstalledUser? @relation(fields: [installedUserId], references: [id])

  @@map("audit_logs")
}

// Legacy models for compatibility
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaigns Campaign[]
  metrics   MarketingMetrics[]

  @@map("users")
}

model Campaign {
  id             String   @id @default(cuid())
  name           String
  description    String?
  status         String   @default("DRAFT")
  startDate      DateTime
  endDate        DateTime?
  budget         Float
  targetAudience String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String

  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  metrics MarketingMetrics[]

  @@map("campaigns")
}

model MarketingMetrics {
  id          String   @id @default(cuid())
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  cost        Float    @default(0)
  revenue     Float    @default(0)
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  campaignId  String
  userId      String

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("marketing_metrics")
}

// ============================================
// MOBILE APP TABLES (Content Sync System)
// ============================================

// Mobile Users (separate from existing users)
model MobileUser {
  id          String   @id @default(cuid())
  deviceId    String   @unique
  name        String?
  email       String?  @unique
  phone       String?
  alternatePhone String?  // Alternate phone number
  description String?  // User bio/description
  category    String?  // Business category
  address     String?  // Business address
  website     String?  // Website URL
  companyLogo String?  // Company logo URL
  appVersion  String?
  platform    String?  // "ios", "android"
  fcmToken    String?  // For push notifications
  isActive    Boolean  @default(true)
  lastActiveAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  businessProfiles BusinessProfile[]
  subscriptions    MobileSubscription[]
  activities       MobileActivity[]
  likes           MobileLike[]
  downloads       MobileDownload[]
  templateLikes   TemplateLike[]
  templateDownloads TemplateDownload[]
  videoLikes      VideoLike[]
  videoDownloads  VideoDownload[]
  greetingLikes   GreetingLike[]
  greetingDownloads GreetingDownload[]
  
  @@map("mobile_users")
}

// Mobile Business Profiles
model BusinessProfile {
  id                String   @id @default(cuid())
  mobileUserId      String
  businessName      String
  ownerName         String
  email             String
  phone             String
  address           String?
  category          String
  logo              String?
  description       String?
  website           String?
  socialMedia       String?  // JSON string
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  mobileUser MobileUser @relation(fields: [mobileUserId], references: [id])
  
  @@map("mobile_business_profiles")
}

// Mobile Templates (synced from admin images)
model MobileTemplate {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  fileUrl     String
  category    String
  language    String   @default("en")
  type        String   // "daily", "festival", "business"
  isPremium   Boolean  @default(false)
  tags        String?  // JSON string
  downloads   Int      @default(0)
  likes       Int      @default(0)
  isActive    Boolean  @default(true)
  
  // Sync tracking
  sourceImageId String? @unique
  syncedAt     DateTime @default(now())
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sourceImage     Image?            @relation(fields: [sourceImageId], references: [id])
  templateLikes    TemplateLike[]
  templateDownloads TemplateDownload[]
  
  @@map("mobile_templates")
}

// Mobile Videos (synced from admin videos)
model MobileVideo {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnailUrl String?
  category    String
  language    String   @default("en")
  type        String   // "tutorial", "promotional", "educational"
  duration    Int?
  isPremium   Boolean  @default(false)
  tags        String?  // JSON string
  downloads   Int      @default(0)
  likes       Int      @default(0)
  isActive    Boolean  @default(true)
  
  // Sync tracking
  sourceVideoId String? @unique
  syncedAt     DateTime @default(now())
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sourceVideo     Video?            @relation(fields: [sourceVideoId], references: [id])
  videoLikes      VideoLike[]
  videoDownloads  VideoDownload[]
  
  @@map("mobile_videos")
}

// Featured Content for Home Screen
model FeaturedContent {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  imageUrl    String
  videoUrl    String?
  type        String   // "banner", "event", "template", "video"
  category    String?
  priority    Int      @default(0)
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("featured_content")
}

// Upcoming Events
model UpcomingEvent {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  imageUrl    String
  date        DateTime
  location    String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("upcoming_events")
}

// Template Categories
model TemplateCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("template_categories")
}

// Template Languages
model TemplateLanguage {
  id          String   @id @default(cuid())
  code        String   @unique  // "en", "hi", "mr"
  name        String
  nativeName  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("template_languages")
}

// Greeting Templates
model GreetingTemplate {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  fileUrl     String
  category    String
  language    String   @default("en")
  isPremium   Boolean  @default(false)
  tags        String?  // JSON string
  downloads   Int      @default(0)
  likes       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  greetingLikes    GreetingLike[]
  greetingDownloads GreetingDownload[]
  
  @@map("greeting_templates")
}

// Greeting Categories
model GreetingCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("greeting_categories")
}

// Stickers
model Sticker {
  id          String   @id @default(cuid())
  name        String   @unique
  imageUrl    String
  category    String?
  tags        String?  // JSON string
  downloads   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("stickers")
}

// Emojis
model Emoji {
  id          String   @id @default(cuid())
  name        String   @unique
  unicode     String
  imageUrl    String
  category    String?
  tags        String?  // JSON string
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("emojis")
}

// Mobile Subscription Plans
model MobileSubscriptionPlan {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  price         Float
  originalPrice Float?
  currency      String   @default("INR")
  period        String   // "month", "year"
  features      String   // JSON string of features array
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  subscriptions MobileSubscription[]
  
  @@map("mobile_subscription_plans")
}

// Mobile User Subscriptions
model MobileSubscription {
  id            String   @id @default(cuid())
  mobileUserId  String
  planId        String
  status        String   @default("ACTIVE") // "ACTIVE", "INACTIVE", "CANCELLED"
  startDate     DateTime
  endDate       DateTime
  amount        Float
  paymentId     String?
  paymentMethod String?
  autoRenew     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  mobileUser MobileUser            @relation(fields: [mobileUserId], references: [id])
  plan       MobileSubscriptionPlan @relation(fields: [planId], references: [id])
  
  @@map("mobile_subscriptions")
}

// Mobile User Activities
model MobileActivity {
  id           String   @id @default(cuid())
  mobileUserId String
  action       String   // "VIEW", "LIKE", "DOWNLOAD", "SEARCH"
  resourceType String   // "TEMPLATE", "GREETING", "CONTENT"
  resourceId   String?
  metadata     String?  // JSON string
  createdAt    DateTime @default(now())
  
  mobileUser MobileUser @relation(fields: [mobileUserId], references: [id])
  
  @@map("mobile_activities")
}

// Mobile Likes
model MobileLike {
  id           String   @id @default(cuid())
  mobileUserId String
  resourceType String   // "TEMPLATE", "GREETING", "CONTENT"
  resourceId   String
  createdAt    DateTime @default(now())
  
  mobileUser MobileUser @relation(fields: [mobileUserId], references: [id])
  
  @@unique([mobileUserId, resourceType, resourceId])
  @@map("mobile_likes")
}

// Mobile Downloads
model MobileDownload {
  id           String   @id @default(cuid())
  mobileUserId String
  resourceType String   // "TEMPLATE", "GREETING", "CONTENT"
  resourceId   String
  fileUrl      String
  createdAt    DateTime @default(now())
  
  mobileUser MobileUser @relation(fields: [mobileUserId], references: [id])
  
  @@map("mobile_downloads")
}

// Template Likes
model TemplateLike {
  id           String   @id @default(cuid())
  templateId   String
  mobileUserId String
  createdAt    DateTime @default(now())
  
  template   MobileTemplate @relation(fields: [templateId], references: [id])
  mobileUser MobileUser     @relation(fields: [mobileUserId], references: [id])
  
  @@unique([templateId, mobileUserId])
  @@map("template_likes")
}

// Template Downloads
model TemplateDownload {
  id           String   @id @default(cuid())
  templateId   String
  mobileUserId String
  createdAt    DateTime @default(now())
  
  template   MobileTemplate @relation(fields: [templateId], references: [id])
  mobileUser MobileUser     @relation(fields: [mobileUserId], references: [id])
  
  @@map("template_downloads")
}

// Video Likes
model VideoLike {
  id           String   @id @default(cuid())
  videoId      String
  mobileUserId String
  createdAt    DateTime @default(now())
  
  video      MobileVideo @relation(fields: [videoId], references: [id])
  mobileUser MobileUser  @relation(fields: [mobileUserId], references: [id])
  
  @@unique([videoId, mobileUserId])
  @@map("video_likes")
}

// Video Downloads
model VideoDownload {
  id           String   @id @default(cuid())
  videoId      String
  mobileUserId String
  createdAt    DateTime @default(now())
  
  video      MobileVideo @relation(fields: [videoId], references: [id])
  mobileUser MobileUser  @relation(fields: [mobileUserId], references: [id])
  
  @@map("video_downloads")
}

// Greeting Likes
model GreetingLike {
  id           String   @id @default(cuid())
  greetingId   String
  mobileUserId String
  createdAt    DateTime @default(now())
  
  greeting   GreetingTemplate @relation(fields: [greetingId], references: [id])
  mobileUser MobileUser       @relation(fields: [mobileUserId], references: [id])
  
  @@unique([greetingId, mobileUserId])
  @@map("greeting_likes")
}

// Greeting Downloads
model GreetingDownload {
  id           String   @id @default(cuid())
  greetingId   String
  mobileUserId String
  createdAt    DateTime @default(now())
  
  greeting   GreetingTemplate @relation(fields: [greetingId], references: [id])
  mobileUser MobileUser       @relation(fields: [mobileUserId], references: [id])
  
  @@map("greeting_downloads")
}

// Mobile Transactions
model MobileTransaction {
  id            String   @id @default(cuid())
  mobileUserId  String
  transactionId String   @unique
  orderId       String?
  amount        Float
  currency      String   @default("INR")
  status        String   // "PENDING", "SUCCESS", "FAILED", "CANCELLED"
  plan          String?
  planName      String?
  description   String?
  paymentMethod String?
  paymentId     String?
  metadata      String?  // JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("mobile_transactions")
}

// User Preferences
model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  notificationsEnabled  Boolean  @default(true)
  darkModeEnabled       Boolean  @default(false)
  defaultViewMode       String   @default("grid") // "grid" or "list"
  preferredCategories   String?  // JSON array of category names
  language              String   @default("en")
  autoSave              Boolean  @default(true)
  highQualityDownloads  Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("user_preferences")
}