generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               String             @id @default(cuid())
  email            String             @unique
  name             String
  password         String
  role             String             @default("ADMIN")
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  auditLogs        AuditLog[]
  categories       BusinessCategory[]
  images           Image[]
  createdSubadmins Subadmin[]
  videos           Video[]

  @@map("admins")
}

model Subadmin {
  id                 String     @id @default(cuid())
  email              String     @unique
  name               String
  password           String
  mobileNumber       String?
  role               String
  permissions        String
  status             String     @default("ACTIVE")
  assignedCategories String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  lastLogin          DateTime?
  createdBy          String
  auditLogs          AuditLog[]
  images             Image[]
  admin              Admin      @relation(fields: [createdBy], references: [id])
  videos             Video[]

  @@map("subadmins")
}

model BusinessCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  icon        String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String
  admin       Admin      @relation(fields: [createdBy], references: [id])
  customers   Customer[]
  images      Image[]
  videos      Video[]

  @@map("business_categories")
}

model Image {
  id                 String            @id @default(cuid())
  title              String
  description        String?
  url                String
  thumbnailUrl       String?
  category           String
  businessCategoryId String?
  tags               String?
  fileSize           Int
  dimensions         String?
  format             String
  adminUploaderId    String?
  subadminUploaderId String?
  uploaderType       String
  approvalStatus     String            @default("PENDING")
  approvedBy         String?
  approvedAt         DateTime?
  downloads          Int               @default(0)
  views              Int               @default(0)
  isMobileSynced     Boolean           @default(false)
  mobileSyncAt       DateTime?
  mobileTemplateId   String?           @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  adminUploader      Admin?            @relation(fields: [adminUploaderId], references: [id])
  businessCategory   BusinessCategory? @relation(fields: [businessCategoryId], references: [id])
  subadminUploader   Subadmin?         @relation(fields: [subadminUploaderId], references: [id])
  mobileTemplate     MobileTemplate?

  @@map("images")
}

model Video {
  id                 String            @id @default(cuid())
  title              String
  description        String?
  url                String
  thumbnailUrl       String?
  category           String
  businessCategoryId String?
  tags               String?
  duration           Int?
  fileSize           Int
  resolution         String?
  format             String
  adminUploaderId    String?
  subadminUploaderId String?
  uploaderType       String
  approvalStatus     String            @default("PENDING")
  approvedBy         String?
  approvedAt         DateTime?
  downloads          Int               @default(0)
  views              Int               @default(0)
  isMobileSynced     Boolean           @default(false)
  mobileSyncAt       DateTime?
  mobileVideoId      String?           @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  mobileVideo        MobileVideo?
  adminUploader      Admin?            @relation(fields: [adminUploaderId], references: [id])
  businessCategory   BusinessCategory? @relation(fields: [businessCategoryId], references: [id])
  subadminUploader   Subadmin?         @relation(fields: [subadminUploaderId], references: [id])

  @@map("videos")
}

model InstalledUser {
  id                    String     @id @default(cuid())
  deviceId              String     @unique
  name                  String?
  email                 String?    @unique
  phone                 String?
  appVersion            String?
  installDate           DateTime   @default(now())
  lastActiveAt          DateTime?
  totalViews            Int        @default(0)
  downloadAttempts      Int        @default(0)
  isConverted           Boolean    @default(false)
  convertedAt           DateTime?
  convertedToCustomerId String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  auditLogs             AuditLog[]

  @@map("installed_users")
}

model Customer {
  id                           String            @id @default(cuid())
  name                         String
  email                        String            @unique
  phone                        String?
  deviceId                     String?
  selectedBusinessCategoryId   String?
  subscriptionStatus           String            @default("INACTIVE")
  subscriptionStartDate        DateTime?
  subscriptionEndDate          DateTime?
  subscriptionAmount           Float?
  paymentMethod                String?
  appVersion                   String?
  lastActiveAt                 DateTime?
  totalDownloads               Int               @default(0)
  businessName                 String?
  businessPhone                String?
  businessEmail                String?
  businessWebsite              String?
  businessAddress              String?
  businessLogo                 String?
  businessDescription          String?
  businessCategory             String?
  convertedFromInstalledUserId String?
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  auditLogs                    AuditLog[]
  selectedBusinessCategory     BusinessCategory? @relation(fields: [selectedBusinessCategoryId], references: [id])
  subscriptions                Subscription[]

  @@map("customers")
}

model Subscription {
  id            String   @id @default(cuid())
  customerId    String
  plan          String   @default("YEARLY")
  status        String   @default("ACTIVE")
  amount        Float
  currency      String   @default("USD")
  startDate     DateTime
  endDate       DateTime
  paymentId     String?
  paymentMethod String?
  autoRenew     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model AuditLog {
  id              String         @id @default(cuid())
  adminId         String?
  subadminId      String?
  customerId      String?
  installedUserId String?
  userType        String
  action          String
  resource        String
  resourceId      String?
  details         String?
  ipAddress       String?
  userAgent       String?
  status          String         @default("SUCCESS")
  createdAt       DateTime       @default(now())
  admin           Admin?         @relation(fields: [adminId], references: [id])
  customer        Customer?      @relation(fields: [customerId], references: [id])
  installedUser   InstalledUser? @relation(fields: [installedUserId], references: [id])
  subadmin        Subadmin?      @relation(fields: [subadminId], references: [id])

  @@map("audit_logs")
}

model User {
  id        String             @id @default(cuid())
  email     String             @unique
  name      String
  password  String
  role      String             @default("USER")
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  campaigns Campaign[]
  metrics   MarketingMetrics[]

  @@map("users")
}

model Campaign {
  id             String             @id @default(cuid())
  name           String
  description    String?
  status         String             @default("DRAFT")
  startDate      DateTime
  endDate        DateTime?
  budget         Float
  targetAudience String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  userId         String
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  metrics        MarketingMetrics[]

  @@map("campaigns")
}

model MarketingMetrics {
  id          String   @id @default(cuid())
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  cost        Float    @default(0)
  revenue     Float    @default(0)
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  campaignId  String
  userId      String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("marketing_metrics")
}

model MobileUser {
  id                String               @id @default(cuid())
  deviceId          String               @unique
  name              String?
  email             String?              @unique
  password          String?
  phone             String?
  alternatePhone    String?
  appVersion        String?
  platform          String?
  fcmToken          String?
  isActive          Boolean              @default(true)
  lastActiveAt      DateTime?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  greetingDownloads GreetingDownload[]
  greetingLikes     GreetingLike[]
  activities        MobileActivity[]
  businessProfiles  BusinessProfile[]
  downloads         MobileDownload[]
  likes             MobileLike[]
  subscriptions     MobileSubscription[]
  templateDownloads TemplateDownload[]
  templateLikes     TemplateLike[]
  videoDownloads    VideoDownload[]
  videoLikes        VideoLike[]

  @@map("mobile_users")
}

model BusinessProfile {
  id           String     @id @default(cuid())
  mobileUserId String
  businessName String
  ownerName    String
  email        String
  phone        String
  address      String?
  category     String
  logo         String?
  description  String?
  website      String?
  socialMedia  String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  @@map("mobile_business_profiles")
}

model MobileTemplate {
  id                String             @id @default(cuid())
  title             String
  description       String?
  imageUrl          String
  fileUrl           String
  category          String
  language          String             @default("en")
  type              String
  isPremium         Boolean            @default(false)
  tags              String?
  downloads         Int                @default(0)
  likes             Int                @default(0)
  isActive          Boolean            @default(true)
  sourceImageId     String?            @unique
  syncedAt          DateTime           @default(now())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sourceImage       Image?             @relation(fields: [sourceImageId], references: [id])
  templateDownloads TemplateDownload[]
  templateLikes     TemplateLike[]

  @@map("mobile_templates")
}

model MobileVideo {
  id             String          @id @default(cuid())
  title          String
  description    String?
  videoUrl       String
  thumbnailUrl   String?
  category       String
  language       String          @default("en")
  type           String
  duration       Int?
  isPremium      Boolean         @default(false)
  tags           String?
  downloads      Int             @default(0)
  likes          Int             @default(0)
  isActive       Boolean         @default(true)
  sourceVideoId  String?         @unique
  syncedAt       DateTime        @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sourceVideo    Video?          @relation(fields: [sourceVideoId], references: [id])
  videoDownloads VideoDownload[]
  videoLikes     VideoLike[]

  @@map("mobile_videos")
}

model FeaturedContent {
  id          String    @id @default(cuid())
  title       String    @unique
  description String?
  imageUrl    String
  videoUrl    String?
  type        String
  category    String?
  priority    Int       @default(0)
  isActive    Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("featured_content")
}

model UpcomingEvent {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  imageUrl    String
  date        DateTime
  location    String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("upcoming_events")
}

model TemplateCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("template_categories")
}

model TemplateLanguage {
  id         String   @id @default(cuid())
  code       String   @unique
  name       String
  nativeName String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("template_languages")
}

model GreetingTemplate {
  id                String             @id @default(cuid())
  title             String
  description       String?
  imageUrl          String
  fileUrl           String
  category          String
  language          String             @default("en")
  isPremium         Boolean            @default(false)
  tags              String?
  downloads         Int                @default(0)
  likes             Int                @default(0)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  greetingDownloads GreetingDownload[]
  greetingLikes     GreetingLike[]

  @@map("greeting_templates")
}

model GreetingCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("greeting_categories")
}

model Sticker {
  id        String   @id @default(cuid())
  name      String   @unique
  imageUrl  String
  category  String?
  tags      String?
  downloads Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stickers")
}

model Emoji {
  id        String   @id @default(cuid())
  name      String   @unique
  unicode   String
  imageUrl  String
  category  String?
  tags      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("emojis")
}

model MobileSubscriptionPlan {
  id            String               @id @default(cuid())
  name          String               @unique
  description   String?
  price         Float
  originalPrice Float?
  currency      String               @default("INR")
  period        String
  features      String
  isActive      Boolean              @default(true)
  sortOrder     Int                  @default(0)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  subscriptions MobileSubscription[]

  @@map("mobile_subscription_plans")
}

model MobileSubscription {
  id            String                 @id @default(cuid())
  mobileUserId  String
  planId        String
  status        String                 @default("ACTIVE")
  startDate     DateTime
  endDate       DateTime
  amount        Float
  paymentId     String?
  paymentMethod String?
  autoRenew     Boolean                @default(true)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  mobileUser    MobileUser             @relation(fields: [mobileUserId], references: [id])
  plan          MobileSubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("mobile_subscriptions")
}

model MobileActivity {
  id           String     @id @default(cuid())
  mobileUserId String
  action       String
  resourceType String
  resourceId   String?
  metadata     String?
  createdAt    DateTime   @default(now())
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  @@map("mobile_activities")
}

model MobileLike {
  id           String     @id @default(cuid())
  mobileUserId String
  resourceType String
  resourceId   String
  createdAt    DateTime   @default(now())
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  @@unique([mobileUserId, resourceType, resourceId])
  @@map("mobile_likes")
}

model MobileDownload {
  id           String     @id @default(cuid())
  mobileUserId String
  resourceType String
  resourceId   String
  fileUrl      String
  createdAt    DateTime   @default(now())
  mobileUser   MobileUser @relation(fields: [mobileUserId], references: [id])

  @@map("mobile_downloads")
}

model TemplateLike {
  id           String         @id @default(cuid())
  templateId   String
  mobileUserId String
  createdAt    DateTime       @default(now())
  mobileUser   MobileUser     @relation(fields: [mobileUserId], references: [id])
  template     MobileTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, mobileUserId])
  @@map("template_likes")
}

model TemplateDownload {
  id           String         @id @default(cuid())
  templateId   String
  mobileUserId String
  createdAt    DateTime       @default(now())
  mobileUser   MobileUser     @relation(fields: [mobileUserId], references: [id])
  template     MobileTemplate @relation(fields: [templateId], references: [id])

  @@map("template_downloads")
}

model VideoLike {
  id           String      @id @default(cuid())
  videoId      String
  mobileUserId String
  createdAt    DateTime    @default(now())
  mobileUser   MobileUser  @relation(fields: [mobileUserId], references: [id])
  video        MobileVideo @relation(fields: [videoId], references: [id])

  @@unique([videoId, mobileUserId])
  @@map("video_likes")
}

model VideoDownload {
  id           String      @id @default(cuid())
  videoId      String
  mobileUserId String
  createdAt    DateTime    @default(now())
  mobileUser   MobileUser  @relation(fields: [mobileUserId], references: [id])
  video        MobileVideo @relation(fields: [videoId], references: [id])

  @@map("video_downloads")
}

model GreetingLike {
  id           String           @id @default(cuid())
  greetingId   String
  mobileUserId String
  createdAt    DateTime         @default(now())
  greeting     GreetingTemplate @relation(fields: [greetingId], references: [id])
  mobileUser   MobileUser       @relation(fields: [mobileUserId], references: [id])

  @@unique([greetingId, mobileUserId])
  @@map("greeting_likes")
}

model GreetingDownload {
  id           String           @id @default(cuid())
  greetingId   String
  mobileUserId String
  createdAt    DateTime         @default(now())
  greeting     GreetingTemplate @relation(fields: [greetingId], references: [id])
  mobileUser   MobileUser       @relation(fields: [mobileUserId], references: [id])

  @@map("greeting_downloads")
}

model MobileTransaction {
  id            String   @id @default(cuid())
  mobileUserId  String
  transactionId String   @unique
  orderId       String?
  amount        Float
  currency      String   @default("INR")
  status        String
  plan          String?
  planName      String?
  description   String?
  paymentMethod String?
  paymentId     String?
  metadata      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("mobile_transactions")
}
